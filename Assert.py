# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAssert():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_assert(self):
    #Assert
    assert(self.vars["css=*[data-test=\"login-button\"]"] == "Login")
    
    #Assert Checked
    assert self.driver.find_element(By.ID, "login-button").is_selected() is True
    
    #Assert confirmation
    assert self.driver.switch_to.alert.text == "name=login-button"
    
    #Assert editable
    element = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    assert element.is_enabled() is True
    
    #Assert element present
    elements = self.driver.find_elements(By.XPATH, "//input[@id=\'login-button\']")
    assert len(elements) > 0
    
    #Assert element not present
    elements = self.driver.find_elements(By.XPATH, "//input[@id=\'login-button\']")
    assert len(elements) == 0

    elements = self.driver.find_elements(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    assert len(elements) == 0

    elements = self.driver.find_elements(By.ID, "login-button")
    assert len(elements) == 0

    elements = self.driver.find_elements(By.NAME, "login-button")
    assert len(elements) == 0
    
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#login-button")
    assert len(elements) == 0
    
    #Assert not checked  
    assert self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']").is_selected() is False
    
    #Assert not editable
    element = self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']")
    assert element.is_enabled() is False
    
    #Assert not selected value
    value = self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']").get_attribute("value")
    assert value != "Login"
    
    #Assert not text
    text = self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']").text
    assert text != "Login"

    #Assert prompt
    assert self.driver.switch_to.alert.text == "xpath=//input[@id=\'login-button\']"
    
    #Assert selected value
    value = self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']").get_attribute("value")
    assert value == "Login"
    
    #Assert selected label
    element = self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']")
    locator = "option[@value='{}']".format(element.get_attribute("value"))
    selected_text = element.find_element(By.XPATH, locator).text
    assert selected_text == "Login"
    
    #Assert text
    assert self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']").text == "Login"
    
    #Assert title
    assert self.driver.title == "xpath=//input[@id=\'login-button\']"
    
    #Assert value
    value = self.driver.find_element(By.XPATH, "//input[@id=\'login-button\']").get_attribute("value")
    assert value == "Login"
    
    #Verify
    assert(self.vars["xpath=//input[@id=\'login-button\']"] == "Login")
    
    #Verify not present
    elements = self.driver.find_elements(By.XPATH, "//input[@id=\'login-button\']")
    assert len(elements) == 0
  
